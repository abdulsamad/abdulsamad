---
import type { HTMLAttributes } from 'astro/types';
import { Image } from 'astro:assets';

export interface Props extends HTMLAttributes<'div'> {
  title: string;
  body: string;
  imageUrl: string;
  'repo-link': string;
  'live-link': string;
  topics: string[];
}

const {
  title,
  body,
  imageUrl,
  'repo-link': repoLink,
  'live-link': liveLink,
  topics,
  ...props
} = Astro.props;

// Words to Uppercased
const shouldBeUppercased = new Set(['json']);

const updatedTitle = title
  .split(' ')
  .map((word) => {
    if (shouldBeUppercased.has(word.toLowerCase())) {
      return word.toUpperCase();
    }

    return word;
  })
  .join(' ');
---

<script>
  const cards = document.querySelectorAll('.card');

  cards.forEach((card) => {
    card.addEventListener('mouseover', (ev) => {
      const { clientX, clientY } = ev as MouseEvent;
      const elem = ev.currentTarget as HTMLDivElement;

      const { left, top } = elem.getBoundingClientRect();
      const { clientWidth, clientHeight, offsetLeft, offsetTop } = elem;

      // Hover radial gradient
      const mouseX = clientX - left;
      const mouseY = clientY - top;

      elem.style.background = `radial-gradient(250px circle at ${mouseX}px ${mouseY}px, rgba(236, 72, 153, 0.35), transparent 80%)`;

      // 3D transition effect
      const THRESHOLD = 3;

      const horizontal = (clientX - offsetLeft) / clientWidth;
      const vertical = (clientY - offsetTop) / clientHeight;
      const rotateX = (THRESHOLD / 2 - horizontal * THRESHOLD).toFixed(2);
      const rotateY = (vertical * THRESHOLD - THRESHOLD / 2).toFixed(2);

      elem.style.transform = `perspective(${clientWidth}px) rotateX(${rotateY}deg) rotateY(${rotateX}deg) scale3d(1, 1, 1)`;
    });

    card.addEventListener('mouseleave', (ev) => {
      const elem = ev.currentTarget as HTMLDivElement;

      // Hover radial gradient
      elem.style.background = ``;
      // 3D transition effect
      elem.style.transform = `perspective(${elem.clientWidth}px) rotateX(0deg) rotateY(0deg)`;
    });
  });
</script>

<div class="flex items-center justify-center overflow-hidden rounded-2xl">
  <div class="rounded-xl">
    <Image
      src={imageUrl}
      class="mx-auto transition-transform hover:scale-105"
      height={400}
      width={720}
      alt={title}
      format="webp"
    />
  </div>
</div>
<div class="card flex flex-col rounded-2xl p-1 backdrop-blur-md transition-transform" {...props}>
  <div class="flex-1 rounded-md p-5 leading-6 no-underline">
    <h3 class="m-0 w-full text-lg font-bold capitalize text-primary-400">
      <a href={repoLink}>
        {updatedTitle}
        <span class="">&rarr;</span>
      </a>
    </h3>
    <div class="mb-0 mt-2 flex-1">
      <div class="text-base">
        {body}
      </div>
      <div class="mt-4 line-clamp-2 flex flex-wrap gap-2">
        {
          topics
            .slice(0, 4)
            .map((topic) => (
              <span class="rounded-full bg-primary px-2 py-1 text-xs font-[400] text-slate-950">
                {topic}
              </span>
            ))
        }
      </div>
      <div class="text- mt-6 flex justify-around">
        <a
          href={repoLink}
          class="inline-flex w-1/2 items-center justify-center"
          rel="noopener"
          target="_blank">
          <span>Code</span>
          <img
            src="/icons/github.svg"
            alt="github"
            aria-hidden="true"
            height={18}
            width={18}
            class="text-red ml-2.5 h-[18px]"
          />
        </a>
        {
          liveLink && (
            <a
              href={liveLink}
              class="inline-flex w-1/2 items-center justify-center"
              rel="noopener"
              target="_blank">
              <span>Link</span>
              <img
                src="/icons/link.svg"
                alt="link"
                aria-hidden="true"
                height={18}
                width={18}
                class="ml-2.5 h-[14px] text-primary"
              />
            </a>
          )
        }
      </div>
    </div>
  </div>
</div>

<style>
  .card {
    box-shadow:
      -20px 20px 60px #2f2f2f,
      20px -20px 60px #000 inset;
  }
</style>
