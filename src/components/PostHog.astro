---
const isDev = import.meta.env.DEV;

const PUBLIC_POSTHOG_KEY = import.meta.env.PUBLIC_POSTHOG_KEY;
const PUBLIC_POSTHOG_HOST = import.meta.env.PUBLIC_POSTHOG_HOST;
---

<script define:vars={{ isDev, PUBLIC_POSTHOG_KEY, PUBLIC_POSTHOG_HOST }} is:inline>
	!(function (t, e) {
		var o, n, p, r;
		e.__SV ||
			((window.posthog = e),
			(e._i = []),
			(e.init = function (i, s, a) {
				function g(t, e) {
					var o = e.split('.');
					2 == o.length && ((t = t[o[0]]), (e = o[1])),
						(t[e] = function () {
							t.push([e].concat(Array.prototype.slice.call(arguments, 0)));
						});
				}
				((p = t.createElement('script')).type = 'text/javascript'),
					(p.crossOrigin = 'anonymous'),
					(p.async = !0),
					(p.src = s.api_host + '/static/array.js'),
					(r = t.getElementsByTagName('script')[0]).parentNode.insertBefore(p, r);
				var u = e;
				for (
					void 0 !== a ? (u = e[a] = []) : (a = 'posthog'),
						u.people = u.people || [],
						u.toString = function (t) {
							var e = 'posthog';
							return 'posthog' !== a && (e += '.' + a), t || (e += ' (stub)'), e;
						},
						u.people.toString = function () {
							return u.toString(1) + '.people (stub)';
						},
						o =
							'capture identify alias people.set people.set_once set_config register register_once unregister opt_out_capturing has_opted_out_capturing opt_in_capturing reset isFeatureEnabled onFeatureFlags getFeatureFlag getFeatureFlagPayload reloadFeatureFlags group updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures getActiveMatchingSurveys getSurveys getNextSurveyStep onSessionId'.split(
								' '
							),
						n = 0;
					n < o.length;
					n++
				)
					g(u, o[n]);
				e._i.push([i, s, a]);
			}),
			(e.__SV = 1));
	})(document, window.posthog || []);

	if (!isDev) {
		posthog.init(PUBLIC_POSTHOG_KEY, {
			api_host: PUBLIC_POSTHOG_HOST,
			ui_host: 'https://us.posthog.com',
			default: '2025-05-24',
			person_profiles: 'always',
			loaded: (posthog) => {
				const distinctId = document.querySelector('.did').innerHTML;

				if (posthog.get_distinct_id() && posthog.get_distinct_id() !== distinctId) {
					posthog.identify(distinctId);
				}
			},
		});
	}

	if (isDev) {
		posthog.init('fake_token', {
			debug: true,
			verbose: true,
			autocapture: false,
			loaded: function (ph) {
				ph.opt_out_capturing();
				ph.set_config({ disable_session_recording: true });
			},
			bootstrap: { featureFlags: {} },
		});
	}
</script>
